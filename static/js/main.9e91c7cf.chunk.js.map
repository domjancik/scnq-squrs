{"version":3,"sources":["firebaseConfig.ts","Button/Button.tsx","Help/Help.tsx","Intro/Intro.tsx","Squr/ConfigContext.ts","Squr/ConfigContextProvider.tsx","Squr/EmptySqur.tsx","Squr/useAnimationFrame.ts","Visualizer/Visualizer.tsx","Squr/notes.ts","Squr/ExpressionContent.tsx","Squr/functions.ts","Squr/useExpressionWithSound.ts","Squr/Squr.tsx","Squr/SqurFirebase.tsx","Squr/TimeContext.tsx","Squr/useExpressionSequencer.ts","useTime.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","cssSqur","css","Button","children","rest","cssHelp","cssHelpContent","variables","title","value","functions","renderHelpItems","items","itemElements","map","Help","useState","open","setOpen","helpContent","onClick","o","cssIntro","Intro","ConfigContext","createContext","volume","ConfigContextProvider","useRef","useEffect","window","setVolume","newVolume","current","Provider","sqr","side","width","height","EmptySqur","color","style","borderRadius","padding","boxSizing","boxShadow","useAnimationFrame","callback","requestRef","React","previousTimeRef","animate","time","deltaTime","requestAnimationFrame","cancelAnimationFrame","Visualizer","values","Array","fill","valuesState","setValuesState","v","slice","length","push","path","val","index","Math","abs","join","viewBox","preserveAspectRatio","d","strokeWidth","stroke","vectorEffect","C","F","G","Bb","notes","getNote","i","note","octave","floor","renderVariables","pipe","collect","key","cssExtra","ExpressionContent","expression","setExpression","res","fontColor","error","instrumentName","fontFamily","border","background","fontWeight","transition","maxWidth","minWidth","minHeight","maxHeight","onChange","e","target","fontSize","description","normalizedSin","x","sin","PI","normalizedTriangle","normalizedSquare","phase","invert","lerp","from","to","alpha","normalizedStep","position","len","pos","useExpressionWithSound","useContext","setRes","resRef","lastValidCompiled","parseError","compile","prevRes","synth","Tone","toDestination","disconnect","dispose","osc","frequency","toFrequency","type","detune","random","start","loop","exprEvalRes","t","tri","stp","inv","max","min","triggerAttackRelease","isNaN","volumeTarget","Infinity","rampTo","Squr","a","init","expressionExternal","setExpressionExternal","contentComponent","useExpressionHook","expressionInternal","setExpressionInternal","black","ContentComponent","SqurFirebase","ref","useDatabase","useDatabaseObjectData","data","status","localExpression","setLocalExpression","expr","newExpression","set","TimeContext","useExpressionSequencer","steps","mappedSteps","split","str","noise","loopA","playing","round","stop","useTime","setTime","ut","SIDE","getXIndex","perRow","getYIndex","dynamicFirebaseSqurs","count","_v","processing","undefined","y","makeSqurs","SQURS_PER_ROW","App","started","setStarted","display","alignItems","justifyContent","gridTemplateColumns","gap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e91c7cf.chunk.js","sourcesContent":["const firebaseConfig = {\n  apiKey: \"AIzaSyA6miG1egwhyCpNcBdr-R8P3flUJP8VLj4\",\n  authDomain: \"squr-d2ae8.firebaseapp.com\",\n  databaseURL:\n    \"https://squr-d2ae8-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"squr-d2ae8\",\n  storageBucket: \"squr-d2ae8.appspot.com\",\n  messagingSenderId: \"25610237851\",\n  appId: \"1:25610237851:web:8b825f5e7ab2363cd2533e\",\n};\n\nexport default firebaseConfig;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react'\n\nimport React, { ReactElement } from 'react'\n\ninterface Props extends React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {\n    \n}\n\nconst cssSqur = css`\n    border-radius: 0.5em;\n    padding: 0.5em;\n    box-sizing: border-box;\n    box-shadow: inset 0em -.2em .5em #abc;\n    background: transparent;\n    color: #abc;\n    border: none;\n    transition: all 500ms;\n\n    &:hover {\n        box-shadow: inset 0em .2em .5em #abc;\n    }\n`\n\nfunction Button({children, ...rest}: Props): ReactElement {\n    return (\n            <button css={cssSqur} {...rest}>{children}</button>\n    )\n}\n\nexport default Button\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react'\n\n\nimport React, { ReactElement, useState } from 'react'\nimport Button from '../Button/Button'\n\ninterface Props {\n    \n}\n\nconst cssHelp = css`\n    position: fixed;\n    left: 2em;\n    top: 2em;\n`\n\nconst cssHelpContent = css`\n    background: rgba(0,0,0, 0.5);\n    color: #abc;\n    border-radius: 0.5em;\n    padding: 1em;\n    pointer-events: none;\n`\n\ntype HelpItem = {\n    title: string\n    value: string\n}\n\nconst variables: HelpItem[] = [\n    {\n        title: 't',\n        value: 'time in secs'\n    },\n    {\n        title: 'i',\n        value: 'index of squr - 1, 2, 3...'\n    },\n    {\n        title: 'x',\n        value: 'x index of squr'\n    },\n    {\n        title: 'y',\n        value: 'y index of squr'\n    },\n]\n\nconst functions: HelpItem[] = [\n    {\n        title: 'sin(x)',\n        value: 'sine with 0-1 cycle input and 0-1 output'\n    },\n    {\n        title: 'tri(x)',\n        value: 'triangle with 0-1 cycle input and 0-1 output'\n    },\n    {\n        title: 'sqr(x, phase?)',\n        value: 'square with 0-1 cycle input, optional phase'\n    },\n    {\n        title: 'stp(x, a, b, c, ...)',\n        value: 'step sequencer with 0-1 cycle input'\n    },\n]\n\nconst renderHelpItems = (items: HelpItem[]) => {\n    const itemElements = items.map(({title, value}) => <li key={title+value}><strong>{title}:</strong> {value}</li>)\n    return <ul>{itemElements}</ul>\n}\n\nfunction Help({}: Props): ReactElement {\n    const [open, setOpen] = useState(true)\n\n    const helpContent = (<div css={cssHelpContent}>\n                <p>make the squrs sing and shine with math expressions</p>\n                <p>all is syncd, tell friends</p>\n                <h3>Variables</h3>\n                {renderHelpItems(variables)}\n                <h3>Functions</h3>\n                {renderHelpItems(functions)}\n            </div>)\n\n    return (\n        <div css={cssHelp}>\n            <div>\n                <Button onClick={() => setOpen(o => !o)}>?</Button>\n            </div>\n            {open && helpContent}\n        </div>\n    )\n}\n\nexport default Help\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react'\n\nimport React, { ReactElement } from 'react'\nimport Button from '../Button/Button'\n\n\nconst cssIntro = css`\n    color: white;\n    text-align: center;\n` \n\ninterface Props {\n    onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n}\n\nfunction Intro({onClick}: Props): ReactElement {\n    return (\n        <div css={cssIntro}>\n            <h1>SQUR!</h1>\n            <div><Button onClick={onClick}>□□ start □□</Button></div>\n            <div>\n                <small>gotta make you click to make sounds, aight, domj</small>\n            </div>\n        </div>\n    )\n}\n\nexport default Intro\n","import { createContext } from \"react\";\n\nconst ConfigContext = createContext<{volume: React.MutableRefObject<number> | null}>({volume: null})\n\nexport default ConfigContext\n","import React, { ReactElement, ReactNode, useEffect, useRef } from 'react'\nimport ConfigContext from './ConfigContext'\n\ninterface Props {\n    children: ReactNode\n}\n\nfunction ConfigContextProvider({children}: Props): ReactElement {\n\n    const volume = useRef(1)\n\n    useEffect(() => {\n        // @ts-ignore\n        window.setVolume = (newVolume: number) => volume.current = newVolume\n        return () => {\n            // @ts-ignore\n            delete window.setVolume\n        }\n    }, [])\n\n    return (\n        <ConfigContext.Provider value={{ volume: volume }} >\n            {children}\n        </ConfigContext.Provider>\n    )\n}\n\nexport default ConfigContextProvider\n","import React, { ReactElement, ReactNode } from 'react'\n\ninterface Props {\n    color: { background: string }\n    children: ReactNode\n    side: number | string\n}\n\nconst sqr = (side: number | string) => ({\n    width: side,\n    height: side\n})\n\nfunction EmptySqur({color, children, side}: Props): ReactElement {\n    return (\n        <div style={\n            {\n                ...{borderRadius: '0.5em', padding: '0.5em', boxSizing: 'border-box', boxShadow: 'inset 0em -.2em .5em #abc'},\n                ...sqr(side),\n                ...color,\n            }\n        }>\n            {children}\n        </div>\n    )\n}\n\nexport default EmptySqur\n","import React from 'react'\n\nconst useAnimationFrame = (callback: (time: number) => void) => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = React.useRef<number>();\n  const previousTimeRef = React.useRef<number>();\n\n  const animate = (time: number) => {\n    if (!!previousTimeRef.current) {\n      const deltaTime = time - previousTimeRef.current;\n      callback(deltaTime);\n    }\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current!);\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, []); // Make sure the effect runs only once\n};\n\nexport default useAnimationFrame;\n","import React, { ReactElement, useRef, useState } from 'react'\nimport useAnimationFrame from '../Squr/useAnimationFrame'\n\ninterface Props {\n    value: number\n}\n\nfunction Visualizer({value}: Props): ReactElement {\n    const values = useRef<number[]>(Array(30).fill(0))\n    const [valuesState, setValuesState] = useState(values.current)\n\n    const v = useRef(0)\n    v.current = value\n\n    useAnimationFrame(() => {\n        values.current = values.current.slice(1, values.current.length)\n        values.current.push(v.current)\n        setValuesState(values.current)\n    })\n\n    const path = valuesState\n        .map((val, index) => `L${index * 1} ${100 - (Math.abs(val) * 90 + 5)}`)\n        .join(' ')\n\n    return (\n        <div style={{width: '100%'}}>\n            <svg height=\"30\" width=\"100%\" viewBox=\"0 0 30 100\" preserveAspectRatio=\"none\">\n                <path d={`M-5 0 ${path}`} strokeWidth=\"2\" stroke=\"currentColor\" fill=\"none\" vectorEffect=\"non-scaling-stroke\" />\n            </svg>\n        </div>\n    )\n}\n\nexport default Visualizer\n","import * as Tone from 'tone'\n\n// const notes = ['C', 'G', 'D', 'A', 'E']\n// const notes = ['C', 'D', 'E', 'A', 'G']\n\nconst C = 'C'\nconst D = 'D'\nconst E = 'E'\nconst Eb = 'Eb'\nconst F = 'F'\nconst G = 'G'\nconst A = 'A'\nconst Ab = 'Ab'\nconst B = 'B'\nconst Bb = 'Bb'\n\nconst SCALE_5_MAJOR_PENTATONIC = [C, D, E, G, A]\nconst SCALE_5_EGYPTIAN_SUSPENDED = [C, D, F, G, Bb]\n// const SCALE_5_BLUES_MINOR_MAN_GONG = [C, Eb, F, Ab, Bb, C]\nconst SCALE_5_BLUES_MINOR_MAN_GONG = [C, Eb, F, Ab, Bb]\nconst SCALE_5_BLUES_MAJOR_RITSUSEN = [C, D, F, G, A]\nconst SCALE_5_MINOR_PENTATONIC = [C, Eb, F, G, Bb]\nconst SCALE_4_TONEJS_SEQUENCER_EXAMPLE = [A, 'Db', E, 'Gb']\nconst notes = SCALE_5_EGYPTIAN_SUSPENDED\n\nconst getNote = (i: number) => {\n    const note = notes[i % notes.length]\n    const octave = Math.floor(i / notes.length)\n    return `${note}${octave + 2}`\n}\n// const getNote = (i: number) => `C${i}`\nconst getNoteFrequency = (i: number) => Tone.Frequency(getNote(i)).toFrequency()\n\nexport { getNote, getNoteFrequency }","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react'\nimport { pipe } from 'fp-ts/lib/function'\nimport { collect } from 'fp-ts/lib/Record'\nimport React, { ReactElement } from 'react'\nimport Visualizer from '../Visualizer/Visualizer'\nimport ContentProps from './ContentProps'\nimport { getNote } from './notes'\n\nconst renderVariables = (variables: {[key: string]: number}) => {\n    return pipe(\n        variables,\n        collect((key, value) => <span><strong> {key}:</strong>{value}</span>)\n    )\n}\n\nconst cssExtra = css`\n    opacity: 0.3;\n    transition: all 500ms;\n    &:hover {\n        opacity: 1;\n    }\n`\n\nfunction ExpressionContent({expression, setExpression, res, fontColor, variables, error, instrumentName}: ContentProps): ReactElement {\n    return (\n        <>\n            <textarea\n                style={{fontFamily: 'monospace', borderRadius: '0.3em', padding: '0.5em', boxSizing: 'border-box', border: 'none', width: '100%', boxShadow: 'inset 0em .2em .5em #abc', background: 'transparent', color: fontColor, fontWeight: 'bold', transition: 'all 300ms', maxWidth: '100%', minWidth: '100%', minHeight: '50%', maxHeight: '100%'}}\n                value={expression} onChange={e => setExpression(e.target.value)}\n            />\n            <div css={cssExtra} style={{color: fontColor}}>\n                <Visualizer value={res} />\n                <div>\n                {getNote(variables?.i || 0)}\n                {renderVariables(variables || {})}\n                </div>\n                \n                <div style={{color: fontColor, fontSize: '2em'}}>{instrumentName}</div>\n            </div>\n            {error && <div style={{color: 'red'}}>{error.description}</div>}\n        </>\n    )\n}\n\nexport default ExpressionContent\n","/**\n * Sin function normalized to 0-1 cycle input, 0-1 return\n */\nconst normalizedSin = (x: number) => Math.sin(x * Math.PI * 2) / 2 + 0.5\n\n/**\n * input is period\n */\n// const timeSin = TODO\n\nconst normalizedTriangle = (x: number) => (x % 1) < 0.5 ? x % 1 * 2 : 1 - (x % 1 - 0.5) * 2\n\nconst normalizedSquare = (x: number, phase: number = 0.5) => x % 1 > phase ? 1 : 0\n\nconst invert = (x: number) => 1 - x\n\nconst lerp = (from: number, to: number, alpha: number = 0.5) => from * invert(alpha) + to * alpha\n\nconst normalizedStep = (position: number, ...steps: number[]) => {\n    const len = steps.length\n    const pos = Math.floor(position * len) % len\n    return steps[pos]\n}\n\nexport {normalizedSin, normalizedTriangle, normalizedSquare, invert, lerp, normalizedStep }","\nimport { compile, parse } from 'expression-eval'\nimport { useContext, useEffect, useRef, useState } from 'react'\nimport * as Tone from 'tone'\nimport ConfigContext from './ConfigContext'\nimport { invert, lerp, normalizedSin, normalizedSquare, normalizedStep, normalizedTriangle } from './functions'\nimport { getNote, getNoteFrequency } from './notes'\nimport ParseError from './ParseError'\nimport { ExpressionHookFunction } from './types'\nimport useAnimationFrame from './useAnimationFrame'\n\nconst useExpressionWithSound: ExpressionHookFunction = (expression: string, variables?: { [key: string]: number }) => {\n    const { volume } = useContext(ConfigContext)\n    const [res, setRes] = useState(0)\n\n    // const [uptime, setUptime] = useState(0)\n    // useAnimationFrame((time) => {setUptime(ut => ut + time / 1000)})\n    useAnimationFrame((time) => {\n        setRes(resRef.current)\n        // setUptime(ut => ut + time / 1000)\n    })\n\n    \n    \n    // const lastValidAst = useRef(parse('0'))\n    const lastValidCompiled = useRef<(context: object) => any>(() => {return 0.5})\n    const parseError = useRef<ParseError>(null)\n\n    useEffect(() => {\n        try {\n            // const ast = parse(expression)\n            // lastValidAst.current = ast\n            lastValidCompiled.current = compile(expression)\n            parseError.current = null\n        } catch(e) {\n            parseError.current = e as ParseError\n        }\n    }, [expression])\n    \n\n    // #region AUDIO\n\n    // Trigger notes - didn't sound half bad\n    const prevRes = useRef(0)\n    const synth = useRef<Tone.Synth<Tone.SynthOptions> | null>(null)\n\n    const resRef = useRef(0)\n\n    useEffect(() => {\n        synth.current = new Tone.Synth().toDestination()\n        return () => {\n            synth.current?.disconnect().dispose()\n        }\n    }, [])\n    \n    const osc = useRef<Tone.Oscillator | null>(null)\n    useEffect(() => {\n        osc.current = new Tone.Oscillator({\n            // frequency: 32 * Math.pow(2, variables.i),\n            frequency: getNoteFrequency(variables?.i || 0),\n            type: \"sine\",\n            // type: \"square\",\n            volume: -30,\n            detune: Math.random() * 30 - 15,\n        }).toDestination().start()\n\n        const clamp = (x: number) => Math.max(Math.min(x, 1), -1)\n\n        const loop = new Tone.Loop(time => {\n            // const exprEvalRes = evalast(lastValidAst.current, {time, t: time, sin: normalizedSin, tri: normalizedTriangle, sqr: normalizedSquare, stp: normalizedStep, inv: invert, ...variables})\n            const exprEvalRes = lastValidCompiled.current({time, t: time, sin: normalizedSin, tri: normalizedTriangle, sqr: normalizedSquare, stp: normalizedStep, inv: invert, ...variables})\n            resRef.current = typeof exprEvalRes === 'number' ? clamp(exprEvalRes) : 0 // evalast may return strings, functions, ...\n            // resRef.current = Math.sin(time) / 2 + 0.5\n\n            if (resRef.current - prevRes.current > 0.95 && synth.current && volume) {\n                synth.current.triggerAttackRelease(getNote(variables?.i || 0), \"8n\", time, volume.current)\n            }\n            prevRes.current = resRef.current\n\n            if (isNaN(resRef.current) || !osc.current || !volume) return\n            const volumeTarget = resRef.current === 0 ? -Infinity : lerp(-30, lerp(-30, 0, volume.current), Math.abs(resRef.current))\n            \n            osc.current.volume.rampTo(volumeTarget, 0.06, time)\n            // osc.current.type = resRef.current >= 0 ? 'sine' : 'square'\n            \n        }, \"0.03\").start(0);\n\n\n        return () => {\n            osc.current?.disconnect().dispose()\n            loop.dispose()\n        }\n    }, [])\n\n    return { res, error: parseError.current, instrumentName: 'synth' }\n}\n\nexport default useExpressionWithSound","/**\n *\n *       * ******* *\n *       *         *\n *       *   .5    *\n *       *         *\n *       * ******* *\n *\n */\n\n//useAnimationFrame((time) => {setDimmer(state => (state + time / 1000) % 1)})\n\n// TODO multiple preset animations\n// TODO beat sync\n// TODO rounded corners\n// TODO expression evaluation\n// TODO saving expression as preset\n// TODO persisting presets\n// TODO live sync of presets / selection (fbase realtime db?)\n// TODO support 2x not just 2*x\n// TODO input bg on focus\n// TODO shared globals (exposed to users)\n// TODO graph display\n// TODO deterministic noise functions\n// TODO splittable squrs\n// TODO keyboard func ~ key.a / key('a') / variable for few special keys / gamepad\n// TODO ...\n\nimport React, { ReactElement, useState } from \"react\"\nimport EmptySqur from \"./EmptySqur\"\nimport ExpressionContent from \"./ExpressionContent\"\nimport SqurProps from \"./SqurProps\"\nimport useExpressionSequencer from \"./useExpressionSequencer\"\nimport useExpressionWithSound from \"./useExpressionWithSound\"\n\n// const COLOR = '#72dec2'\n// const COLOR_RGB = '114, 222, 194'\n// const COLOR_RGB = '255, 0, 255'\nconst COLOR_RGB = \"170, 187, 204\"\n\n// const com = (a: any[]) => a.map(e => e.toString()).join(',')\n\n// const dim = (val: number) => {\n//     const v = val * 255\n//     return {background: `rgb(${com([v, v, v])})`}\n// }\n\nconst trns = (a: number) => ({ background: `rgba(${COLOR_RGB}, ${a})` })\nconst black = (a: number) => ({ background: `rgba(0,0,0, ${a})` })\n\nfunction Squr({\n  init,\n  side = 100,\n  expression: expressionExternal,\n  setExpression: setExpressionExternal,\n  variables = {},\n  contentComponent = ExpressionContent,\n  useExpressionHook = useExpressionWithSound\n}: SqurProps): ReactElement {\n  const [expressionInternal, setExpressionInternal] = useState(init || \"0\")\n  const expression = expressionExternal ?? expressionInternal\n  const setExpression = setExpressionExternal ?? setExpressionInternal\n\n  // const { res, error, instrumentName } = useExpressionWithSound(expression, variables)\n  // const { res, error, instrumentName } = useExpressionSequencer(expression, variables)\n  const { res, error, instrumentName } = useExpressionHook(expression, variables)\n\n  const fontColor = res < 0.5 ? \"#abc\" : \"#444\"\n  const color = res > 0 ? trns(res) : black(-res)\n\n  const ContentComponent = contentComponent\n\n  return (\n    <EmptySqur color={color} side={side}>\n      <ContentComponent\n        expression={expression}\n        setExpression={setExpression}\n        res={res}\n        fontColor={fontColor}\n        variables={variables}\n        error={error}\n        instrumentName={instrumentName}\n      />\n    </EmptySqur>\n  )\n}\n\nexport default Squr\n","import React, { ReactElement, useEffect, useState } from 'react'\nimport Squr from './Squr'\n\nimport 'firebase/database'\nimport { useDatabase, useDatabaseObjectData } from 'reactfire'\nimport SqurProps from './SqurProps'\n\ninterface SqurFirebaseProps extends Omit<SqurProps, 'expression' | 'setExpression'> {\n    path?: string\n}\n\nfunction SqurFirebase({side, path = '/squr', ...rest}: SqurFirebaseProps): ReactElement {\n    const ref = useDatabase().ref(path)\n\n    const { data, status } = useDatabaseObjectData<{expr: string}>(ref)\n    \n    // TODO debounce\n    const setExpression = (newExpression: string) => {\n        setLocalExpression(newExpression)\n        ref.set({expr: newExpression})\n    }\n\n    // Optimistic updates and fix for cursor jumping (https://github.com/facebook/react/issues/955)\n    const [localExpression, setLocalExpression] = useState('.5')\n    useEffect(() => {\n        if (status === 'success' && data.expr !== localExpression) setLocalExpression(data.expr ?? '.5')\n    }, [status, data])\n\n    return (\n        <Squr side={side} expression={localExpression} setExpression={setExpression} {...rest} />\n    )\n}\n\nexport default SqurFirebase\n","import React from 'react'\n\nconst TimeContext = React.createContext(0)\n\nexport { TimeContext }\n","import { ExpressionHookFunction } from \"./types\";\nimport * as Tone from 'tone'\nimport { useEffect, useRef, useState } from \"react\";\n\n\nconst useExpressionSequencer: ExpressionHookFunction = (expression: string, variables?: { [key: string]: number }) => {\n    const steps = useRef<number[]>([0])\n\n    useEffect(() => {\n        const mappedSteps = expression.split(',').map(str => {\n            const val = +str\n            return isNaN(val) ? 0 : val\n        })\n\n        steps.current = mappedSteps || [0]\n    }, [expression])\n\n    const [res, setRes] = useState(0)\n\n    const noise = useRef<Tone.Noise | null>(null)\n    useEffect(() => {\n        noise.current = new Tone.Noise(\"white\").toDestination()\n        noise.current.volume.rampTo(-20, 0)\n\n        const loopA = new Tone.Loop(time => {\n            const currentStep = steps.current[Math.round(time * 4) % steps.current.length]\n            \n            const playing = currentStep >= Math.random()\n\n            setRes(playing ? 1 : 0)\n            if (playing) noise.current?.start(time).stop(\"+32n\");\n        }, \"8n\").start(0);\n        \n        // console.log(Tone.Transport.bpm.value)\n        return () => {\n            noise.current?.dispose()\n            loopA.dispose()\n        }\n    }, [])\n\n    return { res, error: null, instrumentName: 'sequencer' }\n\n}\n\nexport default useExpressionSequencer","import { useState } from \"react\"\nimport useAnimationFrame from \"./Squr/useAnimationFrame\"\n\n// TODO allow refing other times\n// TODO time controls (reffable, context)\nconst useTime = (init: number = 0) => {\n    const [time, setTime] = useState(init)\n  useAnimationFrame(time => setTime(ut => ut + time / 1000))\n\n  return time\n}\n\nexport default useTime","import React, { useState } from \"react\"\nimport { FirebaseAppProvider } from \"reactfire\"\nimport * as Tone from 'tone'\nimport \"./App.css\"\nimport firebaseConfig from \"./firebaseConfig\"\nimport Help from \"./Help/Help\"\nimport Intro from \"./Intro/Intro\"\nimport ConfigContextProvider from \"./Squr/ConfigContextProvider\"\nimport SqurFirebase from \"./Squr/SqurFirebase\"\nimport { TimeContext } from \"./Squr/TimeContext\"\nimport useExpressionSequencer from \"./Squr/useExpressionSequencer\"\nimport useTime from \"./useTime\"\n\n// TODO make this also syncd\nconst SQURS_PER_ROW = 4\nconst SQURS_PER_COL = SQURS_PER_ROW\n\nconst SQURS = SQURS_PER_ROW * SQURS_PER_COL\nconst SIDE = `${80 / SQURS_PER_ROW}vmin`\n\nconst getXIndex = (index: number, perRow = SQURS_PER_ROW) => index % perRow\nconst getYIndex = (index: number, perRow = SQURS_PER_ROW) =>\n  Math.round(index / perRow)\n\nconst makeSqurs = (count: number) => {\n  const a = new Array(count).fill(1)\n  return a.map((_v, index) => {\n    // const content = index > 3 ? SequencerContent : undefined\n    const isSequencer = index === a.length \n    const content = undefined\n    const processing = isSequencer ? useExpressionSequencer : undefined\n\n    return (\n    <SqurFirebase\n      key={index}\n      side={SIDE}\n      path={`/squrs/${index}`}\n      contentComponent={content}\n      useExpressionHook={processing}\n      variables={{\n        i: index + 1,\n        x: getXIndex(index) + 1,\n        y: getYIndex(index) + 1,\n      }}\n    />\n  )})\n}\n\nconst dynamicFirebaseSqurs = makeSqurs(SQURS)\n\nfunction App() {\n  const time = useTime()\n  const [started, setStarted] = useState(false)\n\n  return (\n    <FirebaseAppProvider firebaseConfig={firebaseConfig}>\n      <ConfigContextProvider>\n        <TimeContext.Provider value={time}>\n          {/* TODO Redo with minimal grid based centering */}\n          {/* TODO gif animation credit */}\n          <div\n            style={{\n              display: \"flex\",\n              height: \"100vh\",\n              width: \"100vw\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {started ? (\n              <div\n                style={{\n                  display: \"grid\",\n                  gridTemplateColumns: `repeat(${SQURS_PER_ROW}, ${SIDE})`,\n                  gap: \"2vmin\",\n                }}\n              >\n                <Help />\n                {dynamicFirebaseSqurs}\n              </div>\n            ) : (\n              <Intro onClick={() => {\n                setStarted(true)\n                Tone.start()\n                Tone.Transport.start()\n              }} />\n            )}\n          </div>\n        </TimeContext.Provider>\n      </ConfigContextProvider>\n    </FirebaseAppProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}