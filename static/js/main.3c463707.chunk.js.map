{"version":3,"sources":["firebaseConfig.ts","Button/Button.tsx","Help/Help.tsx","Intro/Intro.tsx","Squr/ConfigContext.ts","Squr/ConfigContextProvider.tsx","Squr/EmptySqur.tsx","Squr/useAnimationFrame.ts","Visualizer/Visualizer.tsx","Squr/instruments/Expression/ExpressionContent.tsx","Squr/functions.ts","Squr/notes.ts","Squr/instruments/Expression/useExpressionWithSound.ts","Squr/instruments/Sequencer/SequencerContent.tsx","Squr/instruments/index.ts","Squr/instruments/Sequencer/useExpressionSequencer.ts","Squr/flipside/menu/uesInstrumentMenuItem.ts","Squr/events/setExpression.ts","Squr/flipside/menu/useCloneMenuItem.ts","Squr/events/clone.ts","Squr/flipside/menu/MenuContent.tsx","Squr/flipside/useFlipside.ts","Squr/useSetExpressionEventListener.ts","Squr/Squr.tsx","Squr/squrCommon.ts","Squr/SqurFirebase.tsx","Squr/TimeContext.tsx","useTime.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","cssSqur","css","Button","children","rest","cssHelp","cssHelpContent","variables","title","value","functions","renderHelpItems","items","itemElements","map","Help","useState","open","setOpen","helpContent","onClick","o","cssIntro","Intro","ConfigContext","createContext","volume","ConfigContextProvider","useRef","useEffect","window","setVolume","newVolume","current","Provider","sqr","side","width","height","EmptySqur","palette","onContextMenu","style","position","borderRadius","padding","boxSizing","boxShadow","useAnimationFrame","callback","requestRef","React","previousTimeRef","animate","time","deltaTime","requestAnimationFrame","cancelAnimationFrame","Visualizer","values","Array","fill","valuesState","setValuesState","v","slice","length","push","path","val","index","Math","abs","join","viewBox","preserveAspectRatio","d","strokeWidth","stroke","vectorEffect","cssExtra","ExpressionContent","expression","setExpression","res","fontColor","fontFamily","border","background","color","fontWeight","transition","maxWidth","minWidth","minHeight","maxHeight","onChange","e","target","fontSize","normalizedSin","x","sin","PI","normalizedTriangle","normalizedSquare","phase","invert","lerp","from","to","alpha","normalizedStep","len","pos","floor","C","F","G","Bb","notes","getNote","i","note","octave","useExpressionWithSound","useContext","setRes","_time","resRef","lastValidCompiled","parseError","compile","osc","Tone","frequency","toFrequency","type","detune","random","toDestination","start","dispose","loop","exprEvalRes","t","tri","stp","inv","max","min","isNaN","volumeTarget","Infinity","rampTo","error","instrumentName","ACTIVE_COLOR","SequencerToggle","active","label","bg","fg","SequencerContent","INSTRUMENTS","gridseq","view","extra","currentStep","step","steps","split","str","toggleStep","stepIndex","updatedSteps","setStep","toggleSide","toggles","textAlign","logic","mappedSteps","synth","loopA","round","playing","triggerAttackRelease","expsyn","useInstrumentMenuItem","setView","setLogic","Object","keys","action","setLogicAndView","SET_EXPRESSION_EVENT_NAME","condition","element","event","CustomEvent","detail","bubbles","createSetExpressionEvent","document","dispatchEvent","useCloneMenuItem","undefined","cloneToAll","row","cloneToRow","y","column","cloneToColumn","MenuContent","props","setPath","menu","selectedMenu","reduce","subMenu","selectedSubMenu","handleMenuItemClick","menuItem","useFlipside","baseContent","isFlipped","setIsFlipped","handleFlip","flipped","ContentComponent","useSetExpressionEventListener","listener","evalExpr","parse","addEventListener","removeEventListener","useExternalIfDefined","init","external","setExternal","internal","setInternal","cssFlipButton","Squr","a","set","off","on","expressionExternal","setExpressionExternal","contentComponent","useExpressionHookExternal","useExpressionHook","logicExternal","setLogicExternal","viewExternal","setViewExternal","useLogic","View","resBase","touching","setTouching","black","onTouchStart","DEFAULT_LOGIC","DEFAULT_VIEW","SqurFirebase","ref","useDatabase","useDatabaseObjectData","data","status","localExpression","setLocalExpression","localLogic","setLocalLogic","localView","setLocalView","makeSetStateAndFirebase","setLocal","firebaseField","newValue","update","expr","getSqurKey","TimeContext","useTime","setTime","ut","SIDE","getXIndex","perRow","getYIndex","dynamicFirebaseSqurs","SQURS_PER_ROW","_v","i1","x1","y1","App","started","setStarted","display","alignItems","justifyContent","gridTemplateColumns","gap","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3c463707.chunk.js","sourcesContent":["const firebaseConfig = {\n  apiKey: \"AIzaSyA6miG1egwhyCpNcBdr-R8P3flUJP8VLj4\",\n  authDomain: \"squr-d2ae8.firebaseapp.com\",\n  databaseURL:\n    \"https://squr-d2ae8-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"squr-d2ae8\",\n  storageBucket: \"squr-d2ae8.appspot.com\",\n  messagingSenderId: \"25610237851\",\n  appId: \"1:25610237851:web:8b825f5e7ab2363cd2533e\",\n};\n\nexport default firebaseConfig;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react'\n\nimport React, { ReactElement } from 'react'\n\ninterface Props extends React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {\n    \n}\n\nconst cssSqur = css`\n    border-radius: 0.5em;\n    padding: 0.5em;\n    box-sizing: border-box;\n    box-shadow: inset 0em -.2em .5em #abc;\n    background: transparent;\n    color: #abc;\n    border: none;\n    font-family: 'JetBrains Mono', monospace;\n\n    /* transition: all 100ms; */\n\n    &:hover {\n        box-shadow: inset 0em .2em .5em #abc;\n    }\n`\n\nfunction Button({children, ...rest}: Props): ReactElement {\n    return (\n            <button css={cssSqur} {...rest}>{children}</button>\n    )\n}\n\nexport default Button\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react'\n\n\nimport React, { ReactElement, useState } from 'react'\nimport Button from '../Button/Button'\n\ninterface Props {\n    \n}\n\nconst cssHelp = css`\n    position: fixed;\n    left: 2em;\n    top: 2em;\n`\n\nconst cssHelpContent = css`\n    background: rgba(0,0,0, 0.5);\n    color: #abc;\n    border-radius: 0.5em;\n    padding: 1em;\n    pointer-events: none;\n`\n\ntype HelpItem = {\n    title: string\n    value: string\n}\n\nconst variables: HelpItem[] = [\n    {\n        title: 't',\n        value: 'time in secs'\n    },\n    {\n        title: 'i',\n        value: 'index of squr - 0, 1, 2... use i1 for 1-indexed'\n    },\n    {\n        title: 'x',\n        value: 'x index of squr, use x1 for 1-indexed'\n    },\n    {\n        title: 'y',\n        value: 'y index of squr, use y1 for 1-indexed'\n    },\n]\n\nconst functions: HelpItem[] = [\n    {\n        title: 'sin(x)',\n        value: 'sine with 0-1 cycle input and 0-1 output'\n    },\n    {\n        title: 'tri(x)',\n        value: 'triangle with 0-1 cycle input and 0-1 output'\n    },\n    {\n        title: 'sqr(x, phase?)',\n        value: 'square with 0-1 cycle input, optional phase'\n    },\n    {\n        title: 'stp(x, a, b, c, ...)',\n        value: 'step sequencer with 0-1 cycle input'\n    },\n]\n\nconst renderHelpItems = (items: HelpItem[]) => {\n    const itemElements = items.map(({title, value}) => <li key={title+value}><strong>{title}:</strong> {value}</li>)\n    return <ul>{itemElements}</ul>\n}\n\nfunction Help({}: Props): ReactElement {\n    const [open, setOpen] = useState(false)\n\n    const helpContent = (<div css={cssHelpContent}>\n                <p>make the squrs sing and shine with math expressions and clicks</p>\n                <p>all is syncd, tell friends</p>\n                <p>RIGHT CLICK switches instruments</p>\n                <h3>Variables</h3>\n                {renderHelpItems(variables)}\n                <h3>Functions</h3>\n                {renderHelpItems(functions)}\n            </div>)\n\n    return (\n        <div css={cssHelp}>\n            <div>\n                <Button onClick={() => setOpen(o => !o)}>Help pls</Button>\n            </div>\n            {open && helpContent}\n        </div>\n    )\n}\n\nexport default Help\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react'\n\nimport React, { ReactElement } from 'react'\nimport Button from '../Button/Button'\n\n\nconst cssIntro = css`\n    color: white;\n    text-align: center;\n` \n\ninterface Props {\n    onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n}\n\nfunction Intro({onClick}: Props): ReactElement {\n    return (\n        <div css={cssIntro}>\n            <h1>SQUR!</h1>\n            <div><Button onClick={onClick}>□□ start □□</Button></div>\n            <div>\n                <small>gotta make you click to make sounds, aight, domj</small>\n            </div>\n        </div>\n    )\n}\n\nexport default Intro\n","import { createContext } from \"react\";\n\nconst ConfigContext = createContext<{volume: React.MutableRefObject<number> | null}>({volume: null})\n\nexport default ConfigContext\n","import React, { ReactElement, ReactNode, useEffect, useRef } from 'react'\nimport ConfigContext from './ConfigContext'\n\ninterface Props {\n    children: ReactNode\n}\n\nfunction ConfigContextProvider({children}: Props): ReactElement {\n\n    const volume = useRef(1)\n\n    useEffect(() => {\n        // @ts-ignore\n        window.setVolume = (newVolume: number) => volume.current = newVolume\n        return () => {\n            // @ts-ignore\n            delete window.setVolume\n        }\n    }, [])\n\n    return (\n        <ConfigContext.Provider value={{ volume: volume }} >\n            {children}\n        </ConfigContext.Provider>\n    )\n}\n\nexport default ConfigContextProvider\n","import React, { ReactElement, ReactNode } from \"react\";\n\ninterface Props {\n  palette: { background: string };\n  children: ReactNode;\n  side: number | string;\n}\n\nconst sqr = (side: number | string) => ({\n  width: side,\n  height: side,\n});\n\nfunction EmptySqur({\n  palette,\n  children,\n  side,\n  onContextMenu,\n  ...rest\n}: Props &\n  React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  >): ReactElement {\n  return (\n    <div\n      onContextMenu={onContextMenu}\n      style={{\n        ...{\n          position: \"relative\",\n          borderRadius: \"0.5em\",\n          padding: \"0.5em\",\n          boxSizing: \"border-box\",\n          boxShadow: \"inset 0em -.2em .5em #abc\",\n        },\n        ...sqr(side),\n        ...palette,\n      }}\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default EmptySqur;\n","import React from 'react'\n\nconst useAnimationFrame = (callback: (time: number) => void) => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = React.useRef<number>();\n  const previousTimeRef = React.useRef<number>();\n\n  const animate = (time: number) => {\n    if (!!previousTimeRef.current) {\n      const deltaTime = time - previousTimeRef.current;\n      callback(deltaTime);\n    }\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current!);\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, []); // Make sure the effect runs only once\n};\n\nexport default useAnimationFrame;\n","import React, { ReactElement, useRef, useState } from 'react'\nimport useAnimationFrame from '../Squr/useAnimationFrame'\n\ninterface Props {\n    value: number\n}\n\nfunction Visualizer({value}: Props): ReactElement {\n    const values = useRef<number[]>(Array(30).fill(0))\n    const [valuesState, setValuesState] = useState(values.current)\n\n    const v = useRef(0)\n    v.current = value\n\n    useAnimationFrame(() => {\n        values.current = values.current.slice(1, values.current.length)\n        values.current.push(v.current)\n        setValuesState(values.current)\n    })\n\n    const path = valuesState\n        .map((val, index) => `L${index * 1} ${100 - (Math.abs(val) * 90 + 5)}`)\n        .join(' ')\n\n    return (\n        <div style={{width: '100%'}}>\n            <svg height=\"30\" width=\"100%\" viewBox=\"0 0 30 100\" preserveAspectRatio=\"none\">\n                <path d={`M-5 0 ${path}`} strokeWidth=\"2\" stroke=\"currentColor\" fill=\"none\" vectorEffect=\"non-scaling-stroke\" />\n            </svg>\n        </div>\n    )\n}\n\nexport default Visualizer\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport { pipe } from \"fp-ts/lib/function\";\nimport { collect } from \"fp-ts/lib/Record\";\nimport React, { ReactElement } from \"react\";\nimport Visualizer from \"../../../Visualizer/Visualizer\";\nimport ContentProps from \"../../ContentProps\";\nimport { getNote } from \"../../notes\";\n\nconst renderVariables = (variables: { [key: string]: number }) => {\n  return pipe(\n    variables,\n    collect((key, value) => (\n      <span>\n        <strong> {key}:</strong>\n        {value}\n      </span>\n    ))\n  );\n};\n\nconst cssExtra = css`\n  opacity: 0.3;\n  transition: all 500ms;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nfunction ExpressionContent({\n  expression,\n  setExpression,\n  res,\n  fontColor,\n}: ContentProps): ReactElement {\n  return (\n    <>\n      <textarea\n        style={{\n          fontFamily: \"JetBrains Mono, monospace\",\n          borderRadius: \"0.3em\",\n          padding: \"0.5em\",\n          boxSizing: \"border-box\",\n          border: \"none\",\n          width: \"100%\",\n          boxShadow: \"inset 0em .2em .5em #abc\",\n          background: \"transparent\",\n          color: fontColor,\n          fontWeight: \"bold\",\n          transition: \"all 300ms\",\n          maxWidth: \"100%\",\n          minWidth: \"100%\",\n          minHeight: \"50%\",\n          maxHeight: \"100%\",\n        }}\n        value={expression}\n        onChange={(e) => setExpression(e.target.value)}\n      />\n      <div css={cssExtra} style={{ color: fontColor, fontSize: \"0.5em\" }}>\n        <Visualizer value={res} />\n        {/* <div>\n          Note: {getNote(variables?.i || 0)}, Vars:{\" \"}\n          {renderVariables(variables || {})}\n        </div>\n\n        <div style={{ color: fontColor, fontSize: \"0.5em\" }}>\n          Instrument: {instrumentName}\n        </div> */}\n      </div>\n      {/* {error && <div style={{ color: \"red\" }}>{error.description}</div>} */}\n    </>\n  );\n}\n\nexport default ExpressionContent;\n","/**\n * Sin function normalized to 0-1 cycle input, 0-1 return\n */\nconst normalizedSin = (x: number) => Math.sin(x * Math.PI * 2) / 2 + 0.5\n\n/**\n * input is period\n */\n// const timeSin = TODO\n\nconst normalizedTriangle = (x: number) => (x % 1) < 0.5 ? x % 1 * 2 : 1 - (x % 1 - 0.5) * 2\n\nconst normalizedSquare = (x: number, phase: number = 0.5) => x % 1 > phase ? 1 : 0\n\nconst invert = (x: number) => 1 - x\n\nconst lerp = (from: number, to: number, alpha: number = 0.5) => from * invert(alpha) + to * alpha\n\nconst normalizedStep = (position: number, ...steps: number[]) => {\n    const len = steps.length\n    const pos = Math.floor(position * len) % len\n    return steps[pos]\n}\n\nexport {normalizedSin, normalizedTriangle, normalizedSquare, invert, lerp, normalizedStep }","import * as Tone from 'tone'\n\n// const notes = ['C', 'G', 'D', 'A', 'E']\n// const notes = ['C', 'D', 'E', 'A', 'G']\n\nconst C = 'C'\nconst D = 'D'\nconst E = 'E'\nconst Eb = 'Eb'\nconst F = 'F'\nconst G = 'G'\nconst A = 'A'\nconst Ab = 'Ab'\nconst B = 'B'\nconst Bb = 'Bb'\n\nconst SCALE_5_MAJOR_PENTATONIC = [C, D, E, G, A]\nconst SCALE_5_EGYPTIAN_SUSPENDED = [C, D, F, G, Bb]\n// const SCALE_5_BLUES_MINOR_MAN_GONG = [C, Eb, F, Ab, Bb, C]\nconst SCALE_5_BLUES_MINOR_MAN_GONG = [C, Eb, F, Ab, Bb]\nconst SCALE_5_BLUES_MAJOR_RITSUSEN = [C, D, F, G, A]\nconst SCALE_5_MINOR_PENTATONIC = [C, Eb, F, G, Bb]\nconst SCALE_4_TONEJS_SEQUENCER_EXAMPLE = [A, 'Db', E, 'Gb']\nconst notes = SCALE_5_EGYPTIAN_SUSPENDED\n\nconst getNote = (i: number) => {\n    const note = notes[i % notes.length]\n    const octave = Math.floor(i / notes.length)\n    return `${note}${octave + 3}`\n}\n// const getNote = (i: number) => `C${i}`\nconst getNoteFrequency = (i: number) => Tone.Frequency(getNote(i)).toFrequency()\n\nexport { getNote, getNoteFrequency }","\nimport { compile, parse } from 'expression-eval'\nimport { useContext, useEffect, useRef, useState } from 'react'\nimport * as Tone from 'tone'\nimport ConfigContext from '../../ConfigContext'\nimport { invert, lerp, normalizedSin, normalizedSquare, normalizedStep, normalizedTriangle } from '../../functions'\nimport { getNote, getNoteFrequency } from '../../notes'\nimport ParseError from '../../ParseError'\nimport { ExpressionHookFunction } from '../../types'\nimport useAnimationFrame from '../../useAnimationFrame'\n\nconst useExpressionWithSound: ExpressionHookFunction = (expression, setExpression, variables) => {\n    const { volume } = useContext(ConfigContext)\n    const [res, setRes] = useState(0)\n\n    useAnimationFrame((_time) => {\n        setRes(resRef.current)\n    })\n    \n    // const lastValidAst = useRef(parse('0'))\n    const lastValidCompiled = useRef<(context: object) => any>(() => {return 0.5})\n    const parseError = useRef<ParseError>(null)\n\n    useEffect(() => {\n        try {\n            // const ast = parse(expression)\n            // lastValidAst.current = ast\n            lastValidCompiled.current = compile(expression)\n            parseError.current = null\n        } catch(e) {\n            parseError.current = e as ParseError\n        }\n    }, [expression])\n    \n\n    // #region AUDIO\n\n    // const prevRes = useRef(0)\n    const resRef = useRef(0)\n    \n    // Trigger notes - didn't sound half bad\n    // const synth = useRef<Tone.Synth<Tone.SynthOptions> | null>(null)\n    // useEffect(() => {\n    //     synth.current = new Tone.Synth().toDestination()\n    //     return () => {\n    //         synth.current?.disconnect().dispose()\n    //     }\n    // }, [])\n\n    useEffect(() => {\n        osc.current = new Tone.Oscillator({\n            // frequency: 32 * Math.pow(2, variables.i),\n            frequency: getNoteFrequency(variables?.i || 0),\n            type: \"sine\",\n            // type: \"square\",\n            volume: -60,\n            detune: Math.random() * 30 - 15,\n        }).toDestination().start()\n\n        return () => {\n            osc.current?.dispose()\n        }\n    }, [])\n    \n    const osc = useRef<Tone.Oscillator | null>(null)\n    useEffect(() => {\n        const clamp = (x: number) => Math.max(Math.min(x, 1), -1)\n\n        const loop = new Tone.Loop(time => {\n            // const exprEvalRes = evalast(lastValidAst.current, {time, t: time, sin: normalizedSin, tri: normalizedTriangle, sqr: normalizedSquare, stp: normalizedStep, inv: invert, ...variables})\n            const exprEvalRes = lastValidCompiled.current({time, t: time, sin: normalizedSin, tri: normalizedTriangle, sqr: normalizedSquare, stp: normalizedStep, inv: invert, ...variables})\n            resRef.current = typeof exprEvalRes === 'number' ? clamp(exprEvalRes) : 0 // evalast may return strings, functions, ...\n            // resRef.current = Math.sin(time) / 2 + 0.5\n\n            // if (resRef.current - prevRes.current > 0.95 && synth.current && volume) {\n            //     synth.current.triggerAttackRelease(getNote(variables?.i || 0), \"8n\", time, volume.current)\n            // }\n            // prevRes.current = resRef.current\n\n            if (isNaN(resRef.current) || !osc.current || !volume) return\n            const volumeTarget = resRef.current === 0 ? -Infinity : lerp(-60, lerp(-60, -40, volume.current), Math.abs(resRef.current))\n            \n            osc.current.volume.rampTo(volumeTarget, 0.06, time)\n            osc.current.type = resRef.current >= 0 ? 'sine' : 'square'\n            \n        }, \"0.03\").start(0);\n\n        return () => {\n            osc.current?.dispose()\n            loop.dispose()\n        }\n    }, [])\n\n    return { res: Math.abs(res), error: parseError.current, instrumentName: 'expsyn' }\n}\n\nexport default useExpressionWithSound","import React, { ReactElement } from 'react'\nimport Button from '../../../Button/Button'\nimport ContentProps from './../../ContentProps'\n\nconst ACTIVE_COLOR = \"#abc\"\nconst INACTIVE_BG_COLOR = \"transparent\"\nconst INACTIVE_FG_COLOR = ACTIVE_COLOR\nconst ACTIVE_FG_COLOR = \"black\"\nconst INACTIVE_FG_WHENON_COLOR = \"rgba(0,0,0,0.1)\"\n\nfunction SequencerToggle({ res, value, onClick, side, active }: { res: number, value: number, onClick: () => void, side: string | number, active: boolean }) {\n    let label = '0'\n    if (value >= 0.5) label = '?'\n    if (value >= 1) label = '!'\n    \n    const bg = active ? ACTIVE_COLOR : INACTIVE_BG_COLOR\n    const inactiveFg = res > 0.5 ? INACTIVE_FG_WHENON_COLOR : INACTIVE_FG_COLOR\n    const fg = active ? ACTIVE_FG_COLOR : inactiveFg\n\n    return <Button onClick={onClick} style={{width: side, height: side, background: bg, color: fg, borderRadius: '100%'}}>{label}</Button>\n}\n\nfunction SequencerContent({res, expression, setExpression, side, extra}: ContentProps): ReactElement {\n    const currentStep = extra?.step || 0\n\n    // TODO share with usesequencer\n    const mappedSteps = expression.split(',').map(str => {\n        const val = +str\n        return isNaN(val) ? 0 : val\n    })\n\n    const steps = mappedSteps || [0]\n\n    const setStep = (stepIndex: number, value: number) => {\n        const updatedSteps = [...steps]\n        updatedSteps[stepIndex] = value\n        setExpression(updatedSteps.join(','))\n    }\n\n    const toggleStep = (stepIndex: number) => {\n        const step = steps[stepIndex]\n        setStep(stepIndex, (step + 0.5) % 1.5)\n    }\n\n    const toggleSide =`calc(${side} / 4 - 5px)`\n    const toggles = steps.map((step, index) => {\n        return <SequencerToggle res={res} active={currentStep === index} side={toggleSide} key={index} value={step} onClick={() => toggleStep(index)} />\n    })\n\n    return (\n        <div style={{textAlign: 'center'}}>\n            {toggles}\n        </div>\n    )\n}\n\nexport default SequencerContent\n","import { ReactElement } from \"react\"\nimport ContentProps from \"../ContentProps\"\nimport { ExpressionHookFunction } from '../types'\nimport ExpressionContent from \"./Expression/ExpressionContent\"\nimport useExpressionWithSound from \"./Expression/useExpressionWithSound\"\nimport SequencerContent from \"./Sequencer/SequencerContent\"\nimport useExpressionSequencer from \"./Sequencer/useExpressionSequencer\"\n\ntype Instrument = {\n    view: (props: ContentProps) => ReactElement,\n    logic: ExpressionHookFunction\n}\n\nconst INSTRUMENTS: { [name: string]: Instrument} = {\n    gridseq: {\n        view: SequencerContent,\n        logic: useExpressionSequencer\n    },\n    expsyn: {\n        view: ExpressionContent,\n        logic: useExpressionWithSound\n    }\n}\n\nexport { INSTRUMENTS }","import { ExpressionHookFunction } from \"../../types\";\nimport * as Tone from 'tone'\nimport { useEffect, useRef, useState } from \"react\";\nimport { getNote } from \"../../notes\";\n\n\nconst useExpressionSequencer: ExpressionHookFunction = (expression, setExpression, variables) => {\n    const steps = useRef<number[]>([0])\n    const [step, setStep] = useState(0)\n\n    useEffect(() => {\n        const mappedSteps = expression.split(',').map(str => {\n            const val = +str\n            return isNaN(val) ? 0 : val\n        })\n\n        steps.current = mappedSteps || [0]\n        if (steps.current.length < 16) {\n            setExpression('0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0')\n        }\n    }, [expression, setExpression])\n\n    const [res, setRes] = useState(0)\n\n    const synth = useRef<Tone.Synth | null>(null)\n    useEffect(() => {\n        synth.current = new Tone.Synth().toDestination()\n        synth.current.volume.rampTo(-30, 0)\n\n        const loopA = new Tone.Loop(time => {\n            const stepIndex = Math.round(time * 4) % steps.current.length\n            const currentStep = steps.current[stepIndex]\n            setStep(stepIndex)\n            \n            const playing = currentStep >= Math.random()\n\n            setRes(playing ? 1 : 0)\n            // if (playing) synth.current?.start(time).stop(\"+32n\");\n            if (playing) synth.current?.triggerAttackRelease(getNote(variables?.i || 0), \"8n\", time);\n        }, \"8n\").start(0);\n        \n        return () => {\n            synth.current?.dispose()\n            loopA.dispose()\n        }\n    }, [])\n\n    return { res, error: null, instrumentName: 'sequencer', extra: {step} }\n\n}\n\nexport default useExpressionSequencer","import ContentProps from \"../../ContentProps\";\nimport { INSTRUMENTS } from \"../../instruments\";\nimport { MenuItem } from \"./menu\";\n\nfunction useInstrumentMenuItem({ setView, setLogic }: ContentProps): MenuItem {\n  const setLogicAndView = (instrumentName: string) => {\n    setLogic && setLogic(instrumentName);\n    setView && setView(instrumentName);\n  };\n\n  const instruments = Object.keys(INSTRUMENTS).map((instrumentName) => ({\n    title: instrumentName,\n    action: () => setLogicAndView(instrumentName),\n  }));\n\n  return {\n    title: \"Instruments\",\n    children: instruments\n  }\n}\n\nexport default useInstrumentMenuItem;\n","import { SetExpressionEventDetail } from \"./SetExpressionEventDetail\";\n\nconst SET_EXPRESSION_EVENT_NAME = \"setExpression\";\n\nconst createSetExpressionEvent = (\n  expression: string,\n  condition?: string,\n  bubbles = true\n) => new CustomEvent<SetExpressionEventDetail>(SET_EXPRESSION_EVENT_NAME, {\n  detail: {\n    expression, condition\n  }, bubbles: true\n});\n\nconst setExpression = (\n  expression: string,\n  condition?: string,\n  element?: HTMLElement\n) => {\n  const event = createSetExpressionEvent(expression, condition)\n\n  const dispatchElement = element ?? document;\n\n  dispatchElement.dispatchEvent(event);\n};\n\nexport default setExpression","import ContentProps from \"../../ContentProps\";\nimport { cloneToAll, cloneToColumn, cloneToRow } from \"../../events/clone\";\nimport { MenuItem } from \"./menu\";\n\nfunction useCloneMenuItem({ variables, expression }: ContentProps): MenuItem {\n  return {\n    title: \"Clone expr\",\n    children: [\n      {\n        title: \"To All\",\n        action: () => cloneToAll(expression),\n      },\n      {\n        title: \"To Row\",\n        action: () => cloneToRow(expression, variables?.y || 0),\n      },\n      {\n        title: \"To Column\",\n        action: () => cloneToColumn(expression, variables?.x || 0),\n      },\n    ],\n  };\n}\n\nexport default useCloneMenuItem;\n","import setExpression from \"./setExpression\";\n\nconst safeInvoke = <T extends unknown>(f?: () => T) => (f ? f() : undefined);\n\n/**\n * Emit an event that clones given expression to all Squrs\n *\n * @param expression\n * @param element Element to emit event on, will default to document\n */\nconst cloneToAll = (expression: string, element?: HTMLElement) => {\n  setExpression(expression, undefined, element);\n};\n\n/**\n * Emit an event that clones given expression to specific column of squrs\n *\n * @param expression\n * @param column\n * @param element Element to emit event on, will default to document\n */\nconst cloneToColumn = (\n  expression: string,\n  column: number,\n  element?: HTMLElement\n) => {\n  setExpression(expression, `x === ${column}`, element);\n};\n\n/**\n * Emit an event that clones given expression to specific row of squrs\n *\n * @param expression\n * @param row\n * @param element Element to emit event on, will default to document\n */\nconst cloneToRow = (expression: string, row: number, element?: HTMLElement) => {\n  setExpression(expression, `y === ${row}`, element);\n};\n\nexport { safeInvoke, cloneToAll, cloneToColumn, cloneToRow };\n","import React, { useState } from \"react\";\nimport Button from \"../../../Button/Button\";\nimport ContentProps from \"../../ContentProps\";\nimport useInstrumentMenuItem from \"./uesInstrumentMenuItem\";\nimport { MenuItem } from \"./menu\";\nimport useCloneMenuItem from \"./useCloneMenuItem\";\n\nfunction MenuContent(props: ContentProps) {\n  // Index based path in menu\n  const [path, setPath] = useState<number[]>([]);\n\n  const menu = [useInstrumentMenuItem(props), useCloneMenuItem(props)];\n\n  const selectedMenu = path.reduce((subMenu, index) => {\n    const selectedSubMenu = subMenu[index];\n    if (selectedSubMenu.children) {\n      return selectedSubMenu.children;\n    }\n    return subMenu;\n  }, menu);\n\n  const handleMenuItemClick = (menuItem: MenuItem, index: number) => () => {\n    if (menuItem.children) {\n      setPath((path) => [...path, index]);\n      return;\n    }\n\n    if (menuItem.action) {\n      menuItem.action();\n      return;\n    }\n  };\n\n  return selectedMenu.map((menuItem, index) => (\n    <Button key={menuItem.title} onClick={handleMenuItemClick(menuItem, index)}>\n      {menuItem.title}\n    </Button>\n  ));\n}\n\nexport default MenuContent;\n","import { useState } from \"react\";\nimport { ContentElement } from \"../types\";\nimport MenuContent from \"./menu/MenuContent\";\n\nfunction useFlipside(baseContent: ContentElement) {\n  const [isFlipped, setIsFlipped] = useState(false);\n  const handleFlip = () => {\n    setIsFlipped((flipped) => !flipped);\n  };\n\n  const ContentComponent = isFlipped ? MenuContent : baseContent;\n\n  return {\n    handleFlip,\n    ContentComponent,\n  };\n}\n\nexport default useFlipside;\n","import { useEffect } from \"react\";\nimport { eval as evalExpr, parse } from \"expression-eval\";\nimport { SetExpressionEventDetail } from \"./events/SetExpressionEventDetail\";\nimport ContentProps from \"./ContentProps\";\n\nfunction useSetExpressionEventListener(setExpression: (expr: string) => void, variables: ContentProps['variables'] = {}) {\n  useEffect(() => {\n    const listener = (e: Event) => {\n      const setExpressionEvent = e as CustomEvent<SetExpressionEventDetail>;\n\n      const { condition, expression } = setExpressionEvent.detail;\n\n      if (!condition || evalExpr(parse(condition), variables)) {\n        setExpression(expression);\n      }\n    };\n    window.addEventListener(\"setExpression\", listener);\n\n    return () => {\n      window.removeEventListener(\"setExpression\", listener);\n    };\n  }, [setExpression, variables]);\n}\n\nexport default useSetExpressionEventListener","/**\n *\n *       * ******* *\n *       *         *\n *       *   .5    *\n *       *         *\n *       * ******* *\n *\n */\n\n//useAnimationFrame((time) => {setDimmer(state => (state + time / 1000) % 1)})\n\n// TODO multiple preset animations\n// TODO beat sync\n// TODO saving expression as preset\n// TODO persisting presets\n// TODO live sync of presets / selection (fbase realtime db?)\n// TODO support 2x not just 2*x\n// TODO input bg on focus\n// TODO shared globals (exposed to users)\n// TODO deterministic noise functions\n// TODO splittable squrs\n// TODO keyboard func ~ key.a / key('a') / variable for few special keys / gamepad\n\n/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react'\n\nimport React, { ReactElement, useState } from \"react\";\nimport EmptySqur from \"./EmptySqur\";\nimport SqurProps from \"./SqurProps\";\nimport { INSTRUMENTS } from \"./instruments\";\nimport useFlipside from \"./flipside/useFlipside\";\nimport Button from \"../Button/Button\";\nimport useSetExpressionEventListener from './useSetExpressionEventListener';\nimport useExpressionWithSound from './instruments/Expression/useExpressionWithSound';\nimport ExpressionContent from './instruments/Expression/ExpressionContent';\n\n// const COLOR = '#72dec2'\n// const COLOR_RGB = '114, 222, 194'\n// const COLOR_RGB = '255, 0, 255'\nconst COLOR_RGB = \"170, 187, 204\";\n\n// const com = (a: any[]) => a.map(e => e.toString()).join(',')\n\n// const dim = (val: number) => {\n//     const v = val * 255\n//     return {background: `rgb(${com([v, v, v])})`}\n// }\n\nconst trns = (a: number) => ({ background: `rgba(${COLOR_RGB}, ${a})` });\nconst black = (a: number) => ({ background: `rgba(0,0,0, ${a})` });\n\n// TODO toggle type information\n\n// const handleTouch = <T extends unknown>(set: React.Dispatch<T>, off: T, on: T): {[key: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>]: Function} => ({\nconst handleTouch = <T extends unknown>(\n  current: T,\n  set: React.Dispatch<T>,\n  off: T,\n  on: T\n) => ({\n  // onTouchStart: () => set(on),\n  onTouchStart: () => (current === on ? set(off) : set(on)),\n  // onTouchStart: () => console.log(on),\n  // onClick: () => console.log(on),\n  // onTouchEnd: () => set(off),\n  // onTouchEnd: () => console.log(off),\n});\n\n\nfunction useExternalIfDefined<T>(\n  init: T,\n  external?: T,\n  setExternal?: (value: T) => void\n): [T, (value: T) => void] {\n  const [internal, setInternal] = useState(init);\n  const value = external ?? internal;\n  const setValue = setExternal ?? setInternal;\n\n  return [value, setValue];\n}\n\nconst cssFlipButton = css`\n  width: calc(100% - 1.3em);\n  position: absolute;\n  bottom: 0.9em;\n  left: 0.6em;\n  font-size: 0.25em;\n`\n\nfunction Squr({\n  init,\n  side = 100,\n  expression: expressionExternal,\n  setExpression: setExpressionExternal,\n  variables = {},\n  contentComponent,\n  useExpressionHook: useExpressionHookExternal,\n  logic: logicExternal,\n  setLogic: setLogicExternal,\n  view: viewExternal,\n  setView: setViewExternal,\n}: SqurProps): ReactElement {\n  const [expression, setExpression] = useExternalIfDefined(\n    \"0\",\n    expressionExternal,\n    setExpressionExternal\n  );\n  const [logic, setLogic] = useExternalIfDefined(\n    \"expsyn\",\n    logicExternal,\n    setLogicExternal\n  );\n  const [view, setView] = useExternalIfDefined(\n    \"expsyn\",\n    viewExternal,\n    setViewExternal\n  );\n\n  const { logic: useLogic } = INSTRUMENTS[logic] || {logic: useExpressionWithSound};\n  const { view: View } = INSTRUMENTS[view] || {view: ExpressionContent};\n\n  const BaseComponent = contentComponent ?? View;\n  const {ContentComponent, handleFlip} = useFlipside(BaseComponent)\n\n  // TODO useTouch\n  const useExpressionHook = useExpressionHookExternal ?? useLogic;\n\n  const {\n    res: resBase,\n    error,\n    extra,\n  } = useExpressionHook(expression, setExpression, variables);\n  const [touching, setTouching] = useState(1);\n\n  const res = resBase;\n  const fontColor = res * touching < 0.5 ? \"#abc\" : \"#444\";\n  const palette = res * touching > 0 ? trns(res) : black(-res);\n\n  useSetExpressionEventListener(setExpression, variables)\n\n\n  return (\n    <EmptySqur\n      palette={palette}\n      side={side}\n      {...handleTouch(touching, setTouching, 0, 1)}\n    >\n      <ContentComponent\n        side={side}\n        expression={expression}\n        setExpression={setExpression}\n        res={res}\n        fontColor={fontColor}\n        variables={variables}\n        error={error}\n        logic={logic}\n        setLogic={setLogic}\n        view={view}\n        setView={setView}\n        extra={extra}\n      />\n      <Button css={cssFlipButton} onClick={handleFlip}>flip</Button>\n    </EmptySqur>\n  );\n}\n\nexport default Squr;\n","import { INSTRUMENTS } from \"./instruments\";\n\nconst DEFAULT_EXPRESSION = \"sin(t)\";\nconst DEFAULT_LOGIC = Object.keys(INSTRUMENTS)[0];\nconst DEFAULT_VIEW = Object.keys(INSTRUMENTS)[0];\n\nconst getSqurKey = (logic = \"logic\", view = \"view\") => `${logic}-${view}`;\n\nexport { DEFAULT_EXPRESSION, DEFAULT_LOGIC, DEFAULT_VIEW, getSqurKey };\n","import React, { ReactElement, useEffect, useState } from \"react\";\nimport Squr from \"./Squr\";\n\nimport \"firebase/database\";\nimport { useDatabase, useDatabaseObjectData } from \"reactfire\";\nimport SqurProps from \"./SqurProps\";\nimport EmptySqur from \"./EmptySqur\";\nimport {\n  DEFAULT_EXPRESSION,\n  DEFAULT_LOGIC,\n  DEFAULT_VIEW,\n} from \"./squrCommon\";\nimport { getSqurKey } from \"./squrCommon\";\n\ninterface SqurFirebaseProps\n  extends Omit<\n    SqurProps,\n    | \"expression\"\n    | \"setExpression\"\n    | \"contentComponent\"\n    | \"useExpressionHook\"\n    | \"toggleInstrument\"\n  > {\n  path?: string;\n}\n\nfunction SqurFirebase({\n  side = 100,\n  path = \"/squr\",\n  ...rest\n}: SqurFirebaseProps): ReactElement {\n  const ref = useDatabase().ref(path);\n\n  const { data, status } = useDatabaseObjectData<{\n    expr: string;\n    logic?: string;\n    view?: string;\n  }>(ref);\n\n  // Optimistic updates and fix for cursor jumping (https://github.com/facebook/react/issues/955)\n  const [localExpression, setLocalExpression] = useState<string | undefined>(\n    undefined\n  );\n  const [localLogic, setLocalLogic] = useState<string | undefined>(undefined);\n  const [localView, setLocalView] = useState<string | undefined>(undefined);\n  // TODO debounce\n  const makeSetStateAndFirebase =\n    (setLocal: typeof setLocalExpression, firebaseField: string) =>\n    (newValue: string) => {\n      setLocal(newValue);\n      ref.update({ [firebaseField]: newValue });\n    };\n  const setExpression = makeSetStateAndFirebase(setLocalExpression, \"expr\");\n  const setLogic = makeSetStateAndFirebase(setLocalLogic, \"logic\");\n  const setView = makeSetStateAndFirebase(setLocalView, \"view\");\n\n  useEffect(() => {\n    if (status === \"success\") {\n      const expr = data.expr ?? DEFAULT_EXPRESSION;\n      const logic = data.logic ?? DEFAULT_LOGIC;\n      const view = data.view ?? DEFAULT_VIEW;\n      if (expr !== localExpression) setLocalExpression(expr);\n      if (logic !== localLogic) setLocalLogic(logic);\n      if (view !== localView) setLocalView(view);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [status, data]);\n\n  if (localExpression === undefined || status !== \"success\") {\n    return (\n      <EmptySqur side={side} palette={{ background: \"black\" }}>\n        {status}\n      </EmptySqur>\n    );\n  }\n\n  return (\n    <Squr\n      key={getSqurKey(localLogic, localView)}\n      side={side}\n      expression={localExpression}\n      setExpression={setExpression}\n      logic={localLogic}\n      setLogic={setLogic}\n      view={localView}\n      setView={setView} \n      {...rest}\n    />\n  );\n}\n\nexport default SqurFirebase;\n","import React from 'react'\n\nconst TimeContext = React.createContext(0)\n\nexport { TimeContext }\n","import { useState } from \"react\"\nimport useAnimationFrame from \"./Squr/useAnimationFrame\"\n\n// TODO allow refing other times\n// TODO time controls (reffable, context)\nconst useTime = (init: number = 0) => {\n    const [time, setTime] = useState(init)\n  useAnimationFrame(time => setTime(ut => ut + time / 1000))\n\n  return time\n}\n\nexport default useTime","import React, { useState } from \"react\";\nimport { FirebaseAppProvider } from \"reactfire\";\nimport * as Tone from \"tone\";\nimport \"./App.css\";\nimport firebaseConfig from \"./firebaseConfig\";\nimport Help from \"./Help/Help\";\nimport Intro from \"./Intro/Intro\";\nimport ConfigContextProvider from \"./Squr/ConfigContextProvider\";\nimport SqurFirebase from \"./Squr/SqurFirebase\";\nimport SqurLocalStorage from \"./Squr/SqurLocalStorage\";\nimport { TimeContext } from \"./Squr/TimeContext\";\nimport useTime from \"./useTime\";\n\n// TODO make this also syncd\nconst SQURS_PER_ROW = 4;\nconst SQURS_PER_COL = SQURS_PER_ROW;\n\nconst SQURS = SQURS_PER_ROW * SQURS_PER_COL;\nconst SIDE = `${80 / SQURS_PER_ROW}vmin`;\n\nconst getXIndex = (index: number, perRow = SQURS_PER_ROW) => index % perRow;\nconst getYIndex = (index: number, perRow = SQURS_PER_ROW) =>\n  Math.floor(index / perRow);\n\nconst makeSqurs = (count: number) => {\n  const a = new Array(count).fill(1);\n  return a.map((_v, index) => {\n    return (\n      <SqurFirebase\n        key={index}\n        // storageKey={index.toString()}\n        side={SIDE}\n        path={`/squrs/${index}`}\n        variables={{\n          i: index,\n          i1: index + 1,\n          x: getXIndex(index),\n          x1: getXIndex(index) + 1,\n          y: getYIndex(index),\n          y1: getYIndex(index) + 1,\n        }}\n      />\n    );\n  });\n};\n\nconst dynamicFirebaseSqurs = makeSqurs(SQURS);\n\nfunction App() {\n  const time = useTime();\n  const [started, setStarted] = useState(false);\n\n  return (\n    <FirebaseAppProvider firebaseConfig={firebaseConfig}>\n      <ConfigContextProvider>\n        <TimeContext.Provider value={time}>\n          {/* TODO Redo with minimal grid based centering */}\n          <div\n            style={{\n              display: \"flex\",\n              height: \"100vh\",\n              width: \"100vw\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            {started ? (\n              <div\n                style={{\n                  display: \"grid\",\n                  gridTemplateColumns: `repeat(${SQURS_PER_ROW}, ${SIDE})`,\n                  gap: \"2vmin\",\n                }}\n              >\n                <Help />\n                {dynamicFirebaseSqurs}\n              </div>\n            ) : (\n              <Intro\n                onClick={() => {\n                  setStarted(true);\n                  Tone.start();\n                  Tone.Transport.start();\n                }}\n              />\n            )}\n          </div>\n        </TimeContext.Provider>\n      </ConfigContextProvider>\n    </FirebaseAppProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/fonts/JetBrainsMono.css'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}